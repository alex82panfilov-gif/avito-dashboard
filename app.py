# app.py (–¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤—ã–≥—Ä—É–∑–∫–∞ –≤ Excel)

import streamlit as st
import pandas as pd
import plotly.express as px
import io # <-- –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É

# --- –ù–ê–°–¢–†–û–ô–ö–ò –°–¢–†–ê–ù–ò–¶–´ ---
st.set_page_config(
    page_title="–î–∞—à–±–æ—Ä–¥ –ø–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥—É —Ä–µ–∫–ª–∞–º—ã",
    page_icon="üìä",
    layout="wide"
)

# --- –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–Ø –ü–û –ü–ê–†–û–õ–Æ ---
def check_password():
    def password_entered():
        if st.session_state["password"] == st.secrets["PASSWORD"]:
            st.session_state["password_correct"] = True
            del st.session_state["password"]
        else:
            st.session_state["password_correct"] = False
    if "password_correct" not in st.session_state:
        st.session_state["password_correct"] = False
    if not st.session_state["password_correct"]:
        st.text_input("–ü–∞—Ä–æ–ª—å", type="password", on_change=password_entered, key="password")
        if st.session_state.get("password_correct") is False:
             st.error("üòï –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return False
    else:
        return True

# <<< –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ù–æ–≤–∞—è –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ Excel >>>
@st.cache_data
def to_excel(df):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç DataFrame –≤ Excel-—Ñ–∞–π–ª –≤ –ø–∞–º—è—Ç–∏."""
    output = io.BytesIO()
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º with, —á—Ç–æ–±—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ writer'a
    with pd.ExcelWriter(output, engine='openpyxl') as writer:
        df.to_excel(writer, index=False, sheet_name='Data')
    # –ü–æ–ª—É—á–∞–µ–º –±–∞–π—Ç—ã –∏–∑ –±—É—Ñ–µ—Ä–∞
    processed_data = output.getvalue()
    return processed_data

# --- –ó–ê–ì–†–£–ó–ö–ê –ò –ö–≠–®–ò–†–û–í–ê–ù–ò–ï –î–ê–ù–ù–´–• ---
@st.cache_data
def load_data(uploaded_file):
    try:
        xls = pd.ExcelFile(uploaded_file)
        all_sheet_names = xls.sheet_names
        target_sheet_names = [name for name in all_sheet_names if name.startswith("–ü–ª–∞–Ω vs –§–∞–∫—Ç_")]

        if not target_sheet_names:
            st.error("–í —Ñ–∞–π–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ª–∏—Å—Ç–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '–ü–ª–∞–Ω vs –§–∞–∫—Ç_–ú–µ—Å—è—Ü'.")
            return None

        monthly_sheets_dict = pd.read_excel(
            uploaded_file, sheet_name=target_sheet_names, header=3, usecols='B:N'
        )
        
        df = pd.concat(list(monthly_sheets_dict.values()), ignore_index=True)
        
        df.dropna(subset=['–í–µ—Ä—Ç–∏–∫–∞–ª—å', '–ö–∞–º–ø–∞–Ω–∏—è'], inplace=True)
        numeric_cols = ['–ü–ª–∞–Ω', '–§–∞–∫—Ç']
        for col in numeric_cols:
            df[col] = pd.to_numeric(df[col], errors='coerce')
        df.fillna(0, inplace=True)
        df = df[(df['–ü–ª–∞–Ω'] != 0) | (df['–§–∞–∫—Ç'] != 0)]
        date_cols = ['–°—Ç–∞—Ä—Ç', '–û–∫–æ–Ω—á–∞–Ω–∏–µ']
        for col in date_cols:
            df[col] = pd.to_datetime(df[col], errors='coerce').dt.date

        df['–ü–æ–¥—Ä—è–¥—á–∏–∫'] = df['–ü–æ–¥—Ä—è–¥—á–∏–∫'].astype(str).str.upper()
        return df
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        return None

# =============================================================================
# --- –û–°–ù–û–í–ù–ê–Ø –ß–ê–°–¢–¨ –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ---
# =============================================================================

st.title("üìä –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –¥–∞—à–±–æ—Ä–¥ –ø–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥—É —Ä–µ–∫–ª–∞–º—ã AVITO")

if not check_password():
    st.stop()

uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel-—Ñ–∞–π–ª —Å –æ—Ç—á–µ—Ç–æ–º", type=["xlsx", "xls"])

if uploaded_file is None:
    st.info("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.")
    st.stop()

df = load_data(uploaded_file)

if df is None or df.empty:
    st.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –≤ —Ñ–∞–π–ª–µ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ª–∏—Å—Ç–æ–≤.")
    st.stop()

# --- –ë–û–ö–û–í–ê–Ø –ü–ê–ù–ï–õ–¨ –° –§–ò–õ–¨–¢–†–ê–ú–ò ---
st.sidebar.header("–§–∏–ª—å—Ç—Ä—ã:")

df['–í–µ—Ä—Ç–∏–∫–∞–ª—å'] = df['–í–µ—Ä—Ç–∏–∫–∞–ª—å'].astype(str)
df['–¢–∏–ø'] = df['–¢–∏–ø'].astype(str)
df['–ì–æ—Ä–æ–¥'] = df['–ì–æ—Ä–æ–¥'].astype(str)

vertical = st.sidebar.multiselect("–í–µ—Ä—Ç–∏–∫–∞–ª—å:", options=sorted(df["–í–µ—Ä—Ç–∏–∫–∞–ª—å"].unique()), default=sorted(df["–í–µ—Ä—Ç–∏–∫–∞–ª—å"].unique()))
supplier = st.sidebar.multiselect("–ü–æ–¥—Ä—è–¥—á–∏–∫ (Supplier):", options=sorted(df["–ü–æ–¥—Ä—è–¥—á–∏–∫"].unique()), default=sorted(df["–ü–æ–¥—Ä—è–¥—á–∏–∫"].unique()))
media_type = st.sidebar.multiselect("–¢–∏–ø –º–µ–¥–∏–∞:", options=sorted(df["–¢–∏–ø"].unique()), default=sorted(df["–¢–∏–ø"].unique()))
city = st.sidebar.multiselect("–ì–æ—Ä–æ–¥:", options=sorted(df["–ì–æ—Ä–æ–¥"].unique()), default=sorted(df["–ì–æ—Ä–æ–¥"].unique()))

df_selection = df.query("–í–µ—Ä—Ç–∏–∫–∞–ª—å == @vertical & –ü–æ–¥—Ä—è–¥—á–∏–∫ == @supplier & –¢–∏–ø == @media_type & –ì–æ—Ä–æ–¥ == @city")

# --- –û–°–ù–û–í–ù–ê–Ø –ü–ê–ù–ï–õ–¨ –î–ê–®–ë–û–†–î–ê (–≥—Ä–∞—Ñ–∏–∫–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
total_plan = int(df_selection["–ü–ª–∞–Ω"].sum())
total_fact = int(df_selection["–§–∞–∫—Ç"].sum())
if total_plan > 0: difference = (total_fact / total_plan) - 1
else: difference = 1 if total_fact > 0 else 0

st.markdown("### –ö–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏")
col1, col2, col3 = st.columns(3)
col1.metric("–ü–ª–∞–Ω", f"{total_plan:,}".replace(",", " "))
col2.metric("–§–∞–∫—Ç", f"{total_fact:,}".replace(",", " "))
col3.metric("–†–∞–∑–Ω–∏—Ü–∞", f"{difference:.1%}")

st.markdown("---")

col1, col2 = st.columns(2)
with col1:
    by_supplier = df_selection.groupby('–ü–æ–¥—Ä—è–¥—á–∏–∫')[['–ü–ª–∞–Ω', '–§–∞–∫—Ç']].sum().reset_index()
    fig_supplier = px.bar(by_supplier, x='–ü–æ–¥—Ä—è–¥—á–∏–∫', y=['–ü–ª–∞–Ω', '–§–∞–∫—Ç'], title="<b>–ü–ª–∞–Ω/–§–∞–∫—Ç –ø–æ –ü–æ–¥—Ä—è–¥—á–∏–∫–∞–º</b>", barmode='group', text_auto='.2s')
    st.plotly_chart(fig_supplier, use_container_width=True)
with col2:
    by_type = df_selection.groupby('–¢–∏–ø')[['–ü–ª–∞–Ω', '–§–∞–∫—Ç']].sum().reset_index()
    fig_type = px.bar(by_type, x='–¢–∏–ø', y=['–ü–ª–∞–Ω', '–§–∞–∫—Ç'], title="<b>–ü–ª–∞–Ω/–§–∞–∫—Ç –ø–æ –¢–∏–ø—É –º–µ–¥–∏–∞</b>", barmode='group', text_auto='.2s')
    st.plotly_chart(fig_type, use_container_width=True)

by_month = df_selection.groupby('–ú–µ—Å—è—Ü')[['–ü–ª–∞–Ω', '–§–∞–∫—Ç']].sum().reset_index()
month_order = ['–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å', '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å']
by_month['–ú–µ—Å—è—Ü'] = pd.Categorical(by_month['–ú–µ—Å—è—Ü'], categories=month_order, ordered=True)
by_month = by_month.sort_values('–ú–µ—Å—è—Ü')
fig_month = px.bar(by_month, x='–ú–µ—Å—è—Ü', y=['–ü–ª–∞–Ω', '–§–∞–∫—Ç'], title="<b>–ü–ª–∞–Ω/–§–∞–∫—Ç –ø–æ –ú–µ—Å—è—Ü–∞–º</b>", barmode='group', text_auto='.2s')
st.plotly_chart(fig_month, use_container_width=True)

# --- –î–ï–¢–ê–õ–¨–ù–ê–Ø –¢–ê–ë–õ–ò–¶–ê –ò –ö–ù–û–ü–ö–ê –°–ö–ê–ß–ò–í–ê–ù–ò–Ø ---
st.markdown("### –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö")
st.dataframe(df_selection)

# <<< –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel >>>
excel_data = to_excel(df_selection)
st.download_button(
    label="üì• –°–∫–∞—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ Excel",
    data=excel_data,
    file_name='dashboard_data_export.xlsx',
    mime='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
)