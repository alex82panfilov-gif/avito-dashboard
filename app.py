# app.py (–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –æ—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ Supabase)

import streamlit as st
import pandas as pd
import plotly.express as px
import io
import numpy as np # <-- –î–æ–±–∞–≤–ª—è–µ–º numpy –¥–ª—è –±–æ–ª–µ–µ —É–¥–æ–±–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤
from supabase import create_client, Client

# --- –ù–ê–°–¢–†–û–ô–ö–ò ---
st.set_page_config(page_title="–î–∞—à–±–æ—Ä–¥ –ø–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥—É —Ä–µ–∫–ª–∞–º—ã", page_icon="üìä", layout="wide")
SUPABASE_TABLE_NAME = "monitoring_data" 

# --- –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–Ø (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
def check_password():
    def password_entered():
        if st.session_state["password"] == st.secrets["PASSWORD"]:
            st.session_state["password_correct"] = True; del st.session_state["password"]
        else: st.session_state["password_correct"] = False
    if "password_correct" not in st.session_state: st.session_state["password_correct"] = False
    if not st.session_state["password_correct"]:
        st.text_input("–ü–∞—Ä–æ–ª—å", type="password", on_change=password_entered, key="password")
        if st.session_state.get("password_correct") is False: st.error("üòï –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.")
        return False
    else: return True

# --- –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° SUPABASE (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
@st.cache_resource
def init_supabase_client():
    url = st.secrets["SUPABASE_URL"]
    key = st.secrets["SUPABASE_KEY"]
    return create_client(url, key)

def load_data_from_supabase(client: Client):
    try:
        response = client.table(SUPABASE_TABLE_NAME).select("*").execute()
        df = pd.DataFrame(response.data)
        if df.empty: return df
        df = df.drop(columns=['id', 'created_at'], errors='ignore')
        for col in ['–°—Ç–∞—Ä—Ç', '–û–∫–æ–Ω—á–∞–Ω–∏–µ']:
            df[col] = pd.to_datetime(df[col], errors='coerce').dt.date
        return df
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã: {e}")
        return pd.DataFrame()

def save_data_to_supabase(client: Client, df: pd.DataFrame):
    client.table(SUPABASE_TABLE_NAME).delete().neq('id', 0).execute()
    df_copy = df.copy()
    for col in ['–°—Ç–∞—Ä—Ç', '–û–∫–æ–Ω—á–∞–Ω–∏–µ']:
        df_copy[col] = pd.to_datetime(df_copy[col]).dt.strftime('%Y-%m-%d')
    data_to_insert = df_copy.to_dict(orient='records')
    client.table(SUPABASE_TABLE_NAME).insert(data_to_insert).execute()
    st.success("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑–µ!")

def clear_data_in_supabase(client: Client):
    client.table(SUPABASE_TABLE_NAME).delete().neq('id', 0).execute()
    st.info("–î–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã. –ú–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–π —Ñ–∞–π–ª.")

# --- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ---
def to_excel(df):
    output = io.BytesIO()
    with pd.ExcelWriter(output, engine='openpyxl') as writer:
        df.to_excel(writer, index=False, sheet_name='Data')
    return output.getvalue()

# <<< –ò–ó–ú–ï–ù–ï–ù–ò–ï: –§—É–Ω–∫—Ü–∏—è process_uploaded_file —Ç–µ–ø–µ—Ä—å —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ç–æ–ª–±–µ—Ü "–†–∞–∑–Ω–∏—Ü–∞" >>>
def process_uploaded_file(uploaded_file):
    xls = pd.ExcelFile(uploaded_file)
    target_sheet_names = [name for name in xls.sheet_names if name.startswith("–ü–ª–∞–Ω vs –§–∞–∫—Ç_")]
    if not target_sheet_names:
        st.error("–í —Ñ–∞–π–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ª–∏—Å—Ç–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '–ü–ª–∞–Ω vs –§–∞–∫—Ç_–ú–µ—Å—è—Ü'.")
        return None
    
    df = pd.concat(list(pd.read_excel(uploaded_file, sheet_name=target_sheet_names, header=3, usecols='B:N').values()), ignore_index=True)
    df.dropna(subset=['–í–µ—Ä—Ç–∏–∫–∞–ª—å', '–ö–∞–º–ø–∞–Ω–∏—è'], inplace=True)
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ü–ª–∞–Ω –∏ –§–∞–∫—Ç –≤ —á–∏—Å–ª–∞, –∑–∞–º–µ–Ω—è—è –æ—à–∏–±–∫–∏ –Ω–∞ 0
    df['–ü–ª–∞–Ω'] = pd.to_numeric(df['–ü–ª–∞–Ω'], errors='coerce').fillna(0)
    df['–§–∞–∫—Ç'] = pd.to_numeric(df['–§–∞–∫—Ç'], errors='coerce').fillna(0)
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –†–∞–∑–Ω–∏—Ü—É —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å
    # –£—Å–ª–æ–≤–∏–µ: –µ—Å–ª–∏ –ü–ª–∞–Ω > 0, —Å—á–∏—Ç–∞–µ–º –ø–æ —Ñ–æ—Ä–º—É–ª–µ. –ò–Ω–∞—á–µ, –µ—Å–ª–∏ –§–∞–∫—Ç > 0, —Ä–∞–∑–Ω–∏—Ü–∞ 1 (100%), –∏–Ω–∞—á–µ 0.
    df['–†–∞–∑–Ω–∏—Ü–∞'] = np.where(
        df['–ü–ª–∞–Ω'] > 0, 
        (df['–§–∞–∫—Ç'] / df['–ü–ª–∞–Ω']) - 1, 
        np.where(df['–§–∞–∫—Ç'] > 0, 1, 0)
    )
    
    df = df[(df['–ü–ª–∞–Ω'] != 0) | (df['–§–∞–∫—Ç'] != 0)]
    
    for col in ['–°—Ç–∞—Ä—Ç', '–û–∫–æ–Ω—á–∞–Ω–∏–µ']:
        df[col] = pd.to_datetime(df[col], errors='coerce').dt.date
        
    df['–ü–æ–¥—Ä—è–¥—á–∏–∫'] = df['–ü–æ–¥—Ä—è–¥—á–∏–∫'].astype(str).str.upper()
    
    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –≤—Å–µ —Å—Ç–æ–ª–±—Ü—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç –∏ –∏–º–µ—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫
    # (–Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –≤ Excel –∏—Ö –ø–æ—Ä—è–¥–æ–∫ –∏–∑–º–µ–Ω–∏—Ç—Å—è)
    final_columns = [
        '–í–µ—Ä—Ç–∏–∫–∞–ª—å', '–ö–∞–º–ø–∞–Ω–∏—è', '–¢–∏–ø', '–ì–æ—Ä–æ–¥', '–ü–æ–¥—Ä—è–¥—á–∏–∫', '–ú–µ—Å—è—Ü', 
        '–°—Ç–∞—Ä—Ç', '–û–∫–æ–Ω—á–∞–Ω–∏–µ', '–ï–¥–∏–Ω–∏—Ü–∞', '–ü–ª–∞–Ω', '–§–∞–∫—Ç', '–†–∞–∑–Ω–∏—Ü–∞', '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π'
    ]
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å) –∏ –∑–∞–ø–æ–ª–Ω—è–µ–º –∏—Ö –ø—É—Å—Ç—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    for col in final_columns:
        if col not in df.columns:
            df[col] = None # –î–ª—è —Ç–µ–∫—Å—Ç–∞/–¥–∞—Ç
            if col in ['–ü–ª–∞–Ω', '–§–∞–∫—Ç', '–†–∞–∑–Ω–∏—Ü–∞']:
                df[col] = 0 # –î–ª—è —á–∏—Å–µ–ª

    return df[final_columns] # –í–æ–∑–≤—Ä–∞—â–∞–µ–º df —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–æ—Ä—è–¥–∫–æ–º —Å—Ç–æ–ª–±—Ü–æ–≤


# =============================================================================
# --- –û–°–ù–û–í–ù–ê–Ø –ß–ê–°–¢–¨ –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
# =============================================================================
st.title("üìä –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –¥–∞—à–±–æ—Ä–¥ –ø–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥—É —Ä–µ–∫–ª–∞–º—ã AVITO")

if not check_password():
    st.stop()

supabase_client = init_supabase_client()
df = load_data_from_supabase(supabase_client)

if df.empty:
    st.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –æ—Ç—á–µ—Ç Excel –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.")
    uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel-—Ñ–∞–π–ª —Å –æ—Ç—á–µ—Ç–æ–º", type=["xlsx", "xls"])
    if uploaded_file:
        with st.spinner("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö..."):
            new_df = process_uploaded_file(uploaded_file)
            if new_df is not None:
                save_data_to_supabase(supabase_client, new_df)
                st.rerun()
else:
    st.sidebar.header("–§–∏–ª—å—Ç—Ä—ã:")
    if st.sidebar.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–π –æ—Ç—á–µ—Ç"):
        clear_data_in_supabase(supabase_client)
        st.rerun()
    
    df['–í–µ—Ä—Ç–∏–∫–∞–ª—å'] = df['–í–µ—Ä—Ç–∏–∫–∞–ª—å'].astype(str); df['–¢–∏–ø'] = df['–¢–∏–ø'].astype(str); df['–ì–æ—Ä–æ–¥'] = df['–ì–æ—Ä–æ–¥'].astype(str)
    vertical = st.sidebar.multiselect("–í–µ—Ä—Ç–∏–∫–∞–ª—å:", options=sorted(df["–í–µ—Ä—Ç–∏–∫–∞–ª—å"].unique()), default=sorted(df["–í–µ—Ä—Ç–∏–∫–∞–ª—å"].unique()))
    supplier = st.sidebar.multiselect("–ü–æ–¥—Ä—è–¥—á–∏–∫ (Supplier):", options=sorted(df["–ü–æ–¥—Ä—è–¥—á–∏–∫"].unique()), default=sorted(df["–ü–æ–¥—Ä—è–¥—á–∏–∫"].unique()))
    media_type = st.sidebar.multiselect("–¢–∏–ø –º–µ–¥–∏–∞:", options=sorted(df["–¢–∏–ø"].unique()), default=sorted(df["–¢–∏–ø"].unique()))
    city = st.sidebar.multiselect("–ì–æ—Ä–æ–¥:", options=sorted(df["–ì–æ—Ä–æ–¥"].unique()), default=sorted(df["–ì–æ—Ä–æ–¥"].unique()))
    df_selection = df.query("–í–µ—Ä—Ç–∏–∫–∞–ª—å == @vertical & –ü–æ–¥—Ä—è–¥—á–∏–∫ == @supplier & –¢–∏–ø == @media_type & –ì–æ—Ä–æ–¥ == @city")
    total_plan = int(df_selection["–ü–ª–∞–Ω"].sum())
    total_fact = int(df_selection["–§–∞–∫—Ç"].sum())
    if total_plan > 0: difference = (total_fact / total_plan) - 1
    else: difference = 1 if total_fact > 0 else 0
    st.markdown("### –ö–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏")
    col1, col2, col3 = st.columns(3); col1.metric("–ü–ª–∞–Ω", f"{total_plan:,}".replace(",", " ")); col2.metric("–§–∞–∫—Ç", f"{total_fact:,}".replace(",", " ")); col3.metric("–†–∞–∑–Ω–∏—Ü–∞", f"{difference:.1%}")
    st.markdown("---")
    col1, col2 = st.columns(2)
    with col1:
        by_supplier = df_selection.groupby('–ü–æ–¥—Ä—è–¥—á–∏–∫')[['–ü–ª–∞–Ω', '–§–∞–∫—Ç']].sum().reset_index()
        fig_supplier = px.bar(by_supplier, x='–ü–æ–¥—Ä—è–¥—á–∏–∫', y=['–ü–ª–∞–Ω', '–§–∞–∫—Ç'], title="<b>–ü–ª–∞–Ω/–§–∞–∫—Ç –ø–æ –ü–æ–¥—Ä—è–¥—á–∏–∫–∞–º</b>", barmode='group', text_auto='.2s')
        st.plotly_chart(fig_supplier, use_container_width=True)
    with col2:
        by_type = df_selection.groupby('–¢–∏–ø')[['–ü–ª–∞–Ω', '–§–∞–∫—Ç']].sum().reset_index()
        fig_type = px.bar(by_type, x='–¢–∏–ø', y=['–ü–ª–∞–Ω', '–§–∞–∫—Ç'], title="<b>–ü–ª–∞–Ω/–§–∞–∫—Ç –ø–æ –¢–∏–ø—É –º–µ–¥–∏–∞</b>", barmode='group', text_auto='.2s')
        st.plotly_chart(fig_type, use_container_width=True)
    by_month = df_selection.groupby('–ú–µ—Å—è—Ü')[['–ü–ª–∞–Ω', '–§–∞–∫—Ç']].sum().reset_index()
    month_order = ['–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å', '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å']
    by_month['–ú–µ—Å—è—Ü'] = pd.Categorical(by_month['–ú–µ—Å—è—Ü'], categories=month_order, ordered=True)
    by_month = by_month.sort_values('–ú–µ—Å—è—Ü')
    fig_month = px.bar(by_month, x='–ú–µ—Å—è—Ü', y=['–ü–ª–∞–Ω', '–§–∞–∫—Ç'], title="<b>–ü–ª–∞–Ω/–§–∞–∫—Ç –ø–æ –ú–µ—Å—è—Ü–∞–º</b>", barmode='group', text_auto='.2s')
    st.plotly_chart(fig_month, use_container_width=True)
    st.markdown("### –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö")
    st.dataframe(df_selection)
    excel_data = to_excel(df_selection)
    st.download_button(label="üì• –°–∫–∞—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ Excel", data=excel_data, file_name='dashboard_data_export.xlsx', mime='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')